version 1.0;

graph torch_jit_export(input) -> (output)
{
    variable_49 = variable<scalar>(label = 'features.9.weight', shape = [1, 256]);
    variable_48 = variable<scalar>(label = 'features.9.running_var', shape = [1, 256]);
    variable_47 = variable<scalar>(label = 'features.9.running_mean', shape = [1, 256]);
    variable_46 = variable<scalar>(label = 'features.9.bias', shape = [1, 256]);
    variable_45 = variable<scalar>(label = 'features.8.weight', shape = [256, 128, 3, 3]);
    variable_44 = variable<scalar>(label = 'features.8.bias', shape = [1, 256]);
    variable_43 = variable<scalar>(label = 'features.5.weight', shape = [1, 128]);
    variable_42 = variable<scalar>(label = 'features.5.running_var', shape = [1, 128]);
    variable_41 = variable<scalar>(label = 'features.5.running_mean', shape = [1, 128]);
    variable_40 = variable<scalar>(label = 'features.5.bias', shape = [1, 128]);
    variable_39 = variable<scalar>(label = 'features.4.weight', shape = [128, 64, 3, 3]);
    variable_38 = variable<scalar>(label = 'features.4.bias', shape = [1, 128]);
    variable_37 = variable<scalar>(label = 'features.26.weight', shape = [1, 512]);
    variable_36 = variable<scalar>(label = 'features.26.running_var', shape = [1, 512]);
    variable_35 = variable<scalar>(label = 'features.26.running_mean', shape = [1, 512]);
    variable_34 = variable<scalar>(label = 'features.26.bias', shape = [1, 512]);
    variable_33 = variable<scalar>(label = 'features.25.weight', shape = [512, 512, 3, 3]);
    variable_32 = variable<scalar>(label = 'features.25.bias', shape = [1, 512]);
    variable_31 = variable<scalar>(label = 'features.23.weight', shape = [1, 512]);
    variable_30 = variable<scalar>(label = 'features.23.running_var', shape = [1, 512]);
    variable_29 = variable<scalar>(label = 'features.23.running_mean', shape = [1, 512]);
    variable_28 = variable<scalar>(label = 'features.23.bias', shape = [1, 512]);
    variable_27 = variable<scalar>(label = 'features.22.weight', shape = [512, 512, 3, 3]);
    variable_26 = variable<scalar>(label = 'features.22.bias', shape = [1, 512]);
    variable_25 = variable<scalar>(label = 'features.19.weight', shape = [1, 512]);
    variable_24 = variable<scalar>(label = 'features.19.running_var', shape = [1, 512]);
    variable_23 = variable<scalar>(label = 'features.19.running_mean', shape = [1, 512]);
    variable_22 = variable<scalar>(label = 'features.19.bias', shape = [1, 512]);
    variable_21 = variable<scalar>(label = 'features.18.weight', shape = [512, 512, 3, 3]);
    variable_20 = variable<scalar>(label = 'features.18.bias', shape = [1, 512]);
    variable_19 = variable<scalar>(label = 'features.16.weight', shape = [1, 512]);
    variable_18 = variable<scalar>(label = 'features.16.running_var', shape = [1, 512]);
    variable_17 = variable<scalar>(label = 'features.16.running_mean', shape = [1, 512]);
    variable_16 = variable<scalar>(label = 'features.16.bias', shape = [1, 512]);
    variable_15 = variable<scalar>(label = 'features.15.weight', shape = [512, 256, 3, 3]);
    variable_14 = variable<scalar>(label = 'features.15.bias', shape = [1, 512]);
    variable_13 = variable<scalar>(label = 'features.12.weight', shape = [1, 256]);
    variable_12 = variable<scalar>(label = 'features.12.running_var', shape = [1, 256]);
    variable_11 = variable<scalar>(label = 'features.12.running_mean', shape = [1, 256]);
    variable_10 = variable<scalar>(label = 'features.12.bias', shape = [1, 256]);
    variable_9 = variable<scalar>(label = 'features.11.weight', shape = [256, 256, 3, 3]);
    variable_8 = variable<scalar>(label = 'features.11.bias', shape = [1, 256]);
    variable_7 = variable<scalar>(label = 'features.1.weight', shape = [1, 64]);
    variable_6 = variable<scalar>(label = 'features.1.running_var', shape = [1, 64]);
    variable_5 = variable<scalar>(label = 'features.1.running_mean', shape = [1, 64]);
    variable_4 = variable<scalar>(label = 'features.1.bias', shape = [1, 64]);
    variable_3 = variable<scalar>(label = 'features.0.weight', shape = [64, 3, 3, 3]);
    variable_2 = variable<scalar>(label = 'features.0.bias', shape = [1, 64]);
    variable_1 = variable<scalar>(label = 'classifier.weight', shape = [10, 512]);
    variable = variable<scalar>(label = 'classifier.bias', shape = [10]);
    input = external<scalar>(shape = [1, 3, 32, 32]);
    mul_1 = mul(1.0, variable);
    unsqueeze = unsqueeze(mul_1, axes = [0]);
    conv = conv(input, variable_3, variable_2, border = 'constant', dilation = [1, 1], groups = 1, padding = [(1, 1), (1, 1)], stride = [1, 1]);
    batch_normalization = batch_normalization(conv, variable_5, variable_6, variable_4, variable_7, epsilon = 9.999999747378752e-06);
    relu = relu(batch_normalization);
    max_pool = max_pool(relu, border = 'ignore', dilation = [1, 1, 1, 1], padding = [(0, 0), (0, 0), (0, 0), (0, 0)], size = [1, 1, 2, 2], stride = [1, 1, 2, 2]);
    conv_1 = conv(max_pool, variable_39, variable_38, border = 'constant', dilation = [1, 1], groups = 1, padding = [(1, 1), (1, 1)], stride = [1, 1]);
    batch_normalization_1 = batch_normalization(conv_1, variable_41, variable_42, variable_40, variable_43, epsilon = 9.999999747378752e-06);
    relu_1 = relu(batch_normalization_1);
    max_pool_1 = max_pool(relu_1, border = 'ignore', dilation = [1, 1, 1, 1], padding = [(0, 0), (0, 0), (0, 0), (0, 0)], size = [1, 1, 2, 2], stride = [1, 1, 2, 2]);
    conv_2 = conv(max_pool_1, variable_45, variable_44, border = 'constant', dilation = [1, 1], groups = 1, padding = [(1, 1), (1, 1)], stride = [1, 1]);
    batch_normalization_2 = batch_normalization(conv_2, variable_47, variable_48, variable_46, variable_49, epsilon = 9.999999747378752e-06);
    relu_2 = relu(batch_normalization_2);
    conv_3 = conv(relu_2, variable_9, variable_8, border = 'constant', dilation = [1, 1], groups = 1, padding = [(1, 1), (1, 1)], stride = [1, 1]);
    batch_normalization_3 = batch_normalization(conv_3, variable_11, variable_12, variable_10, variable_13, epsilon = 9.999999747378752e-06);
    relu_3 = relu(batch_normalization_3);
    max_pool_2 = max_pool(relu_3, border = 'ignore', dilation = [1, 1, 1, 1], padding = [(0, 0), (0, 0), (0, 0), (0, 0)], size = [1, 1, 2, 2], stride = [1, 1, 2, 2]);
    conv_4 = conv(max_pool_2, variable_15, variable_14, border = 'constant', dilation = [1, 1], groups = 1, padding = [(1, 1), (1, 1)], stride = [1, 1]);
    batch_normalization_4 = batch_normalization(conv_4, variable_17, variable_18, variable_16, variable_19, epsilon = 9.999999747378752e-06);
    relu_4 = relu(batch_normalization_4);
    conv_5 = conv(relu_4, variable_21, variable_20, border = 'constant', dilation = [1, 1], groups = 1, padding = [(1, 1), (1, 1)], stride = [1, 1]);
    batch_normalization_5 = batch_normalization(conv_5, variable_23, variable_24, variable_22, variable_25, epsilon = 9.999999747378752e-06);
    relu_5 = relu(batch_normalization_5);
    max_pool_3 = max_pool(relu_5, border = 'ignore', dilation = [1, 1, 1, 1], padding = [(0, 0), (0, 0), (0, 0), (0, 0)], size = [1, 1, 2, 2], stride = [1, 1, 2, 2]);
    conv_6 = conv(max_pool_3, variable_27, variable_26, border = 'constant', dilation = [1, 1], groups = 1, padding = [(1, 1), (1, 1)], stride = [1, 1]);
    batch_normalization_6 = batch_normalization(conv_6, variable_29, variable_30, variable_28, variable_31, epsilon = 9.999999747378752e-06);
    relu_6 = relu(batch_normalization_6);
    conv_7 = conv(relu_6, variable_33, variable_32, border = 'constant', dilation = [1, 1], groups = 1, padding = [(1, 1), (1, 1)], stride = [1, 1]);
    batch_normalization_7 = batch_normalization(conv_7, variable_35, variable_36, variable_34, variable_37, epsilon = 9.999999747378752e-06);
    relu_7 = relu(batch_normalization_7);
    max_pool_4 = max_pool(relu_7, border = 'ignore', dilation = [1, 1, 1, 1], padding = [(0, 0), (0, 0), (0, 0), (0, 0)], size = [1, 1, 2, 2], stride = [1, 1, 2, 2]);
    avg_pool = avg_pool(max_pool_4, border = 'ignore', dilation = [1, 1, 1, 1], padding = [(0, 0), (0, 0), (0, 0), (0, 0)], size = [1, 1, 1, 1], stride = [1, 1, 1, 1]);
    reshape = reshape(avg_pool, axis_count = -1, axis_start = 0, shape = [1, 512]);
    matmul = matmul(reshape, variable_1, transposeA = false, transposeB = true);
    mul = mul(1.0, matmul);
    output = add(mul, unsqueeze);
}
